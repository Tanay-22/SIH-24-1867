"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Notification = exports.ENotificationType = void 0;
var rettiwt_core_1 = require("rettiwt-core");
var JsonUtils_1 = require("../../helper/JsonUtils");
/**
 * The different types of notifications.
 *
 * @public
 */
var ENotificationType;
(function (ENotificationType) {
    ENotificationType["RECOMMENDATION"] = "RECOMMENDATION";
    ENotificationType["INFORMATION"] = "INFORMATION";
    ENotificationType["LIVE"] = "LIVE";
    ENotificationType["ALERT"] = "ALERT";
    ENotificationType["UNDEFINED"] = "UNDEFINED";
})(ENotificationType || (exports.ENotificationType = ENotificationType = {}));
/**
 * The details of a single notification.
 *
 * @public
 */
var Notification = /** @class */ (function () {
    /**
     * @param notification - The raw notification details.
     */
    function Notification(notification) {
        var _a, _b, _c, _d;
        // Getting the original notification type
        var notificationType = (0, JsonUtils_1.findKeyByValue)(rettiwt_core_1.ENotificationType, notification.icon.id);
        this.from = ((_b = (_a = notification.template) === null || _a === void 0 ? void 0 : _a.aggregateUserActionsV1) === null || _b === void 0 ? void 0 : _b.fromUsers)
            ? notification.template.aggregateUserActionsV1.fromUsers.map(function (item) { return item.user.id; })
            : [];
        this.id = notification.id;
        this.message = notification.message.text;
        this.receivedAt = new Date(Number(notification.timestampMs));
        this.target = ((_d = (_c = notification.template) === null || _c === void 0 ? void 0 : _c.aggregateUserActionsV1) === null || _d === void 0 ? void 0 : _d.targetObjects)
            ? notification.template.aggregateUserActionsV1.targetObjects.map(function (item) { return item.tweet.id; })
            : [];
        this.type = notificationType
            ? ENotificationType[notificationType]
            : ENotificationType.UNDEFINED;
    }
    /**
     * Extracts and deserializes the list of notifications from the given raw response data.
     *
     * @param response - The raw response data.
     *
     * @returns The deserialized list of notifications.
     *
     * @internal
     */
    Notification.list = function (response) {
        var notifications = [];
        // Extracting notifications
        if (response.globalObjects.notifications) {
            // Iterating over the raw list of notifications
            for (var _i = 0, _a = Object.entries(response.globalObjects.notifications); _i < _a.length; _i++) {
                var _b = _a[_i], value = _b[1];
                notifications.push(new Notification(value));
            }
        }
        return notifications;
    };
    return Notification;
}());
exports.Notification = Notification;
//# sourceMappingURL=Notification.js.map