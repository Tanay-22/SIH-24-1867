"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TweetService = void 0;
var fs_1 = require("fs");
var Extractors_1 = require("../../collections/Extractors");
var Resource_1 = require("../../enums/Resource");
var FetcherService_1 = require("./FetcherService");
/**
 * Handles interacting with resources related to tweets.
 *
 * @public
 */
var TweetService = /** @class */ (function (_super) {
    __extends(TweetService, _super);
    /**
     * @param config - The config object for configuring the Rettiwt instance.
     *
     * @internal
     */
    function TweetService(config) {
        return _super.call(this, config) || this;
    }
    /**
     * Get the details of a tweet.
     *
     * @param id - The id of the target tweet.
     *
     * @returns
     * The details of the tweet with the given id.
     * If no tweet matches the given id, returns `undefined`.
     *
     * @example
     * ```
     * import { Rettiwt } from 'rettiwt-api';
     *
     * // Creating a new Rettiwt instance using the given 'API_KEY'
     * const rettiwt = new Rettiwt({ apiKey: API_KEY });
     *
     * // Fetching the details of the tweet with the id '1234567890'
     * rettiwt.tweet.details('1234567890')
     * .then(res => {
     * 	console.log(res);
     * })
     * .catch(err => {
     * 	console.log(err);
     * });
     * ```
     */
    TweetService.prototype.details = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var resource, response, data, response, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.userId != undefined)) return [3 /*break*/, 2];
                        resource = Resource_1.EResourceType.TWEET_DETAILS_ALT;
                        return [4 /*yield*/, this.request(resource, { id: id })];
                    case 1:
                        response = _a.sent();
                        data = Extractors_1.extractors[resource](response, id);
                        return [2 /*return*/, data];
                    case 2:
                        resource = Resource_1.EResourceType.TWEET_DETAILS;
                        return [4 /*yield*/, this.request(resource, { id: id })];
                    case 3:
                        response = _a.sent();
                        data = Extractors_1.extractors[resource](response, id);
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Like a tweet.
     *
     * @param id - The id of the tweet to be liked.
     *
     * @returns Whether liking was successful or not.
     *
     * @example
     * ```
     * import { Rettiwt } from 'rettiwt-api';
     *
     * // Creating a new Rettiwt instance using the given 'API_KEY'
     * const rettiwt = new Rettiwt({ apiKey: API_KEY });
     *
     * // Liking the Tweet with id '1234567890'
     * rettiwt.tweet.like('1234567890')
     * .then(res => {
     * 	console.log(res);
     * })
     * .catch(err => {
     * 	console.log(err);
     * });
     * ```
     */
    TweetService.prototype.like = function (id) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var resource, response, data;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        resource = Resource_1.EResourceType.TWEET_LIKE;
                        return [4 /*yield*/, this.request(resource, {
                                id: id,
                            })];
                    case 1:
                        response = _b.sent();
                        data = (_a = Extractors_1.extractors[resource](response)) !== null && _a !== void 0 ? _a : false;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Get the list of tweets from a tweet list.
     *
     * @param id - The id of target list.
     * @param count - The number of tweets to fetch, must be \<= 100.
     * @param cursor - The cursor to the batch of tweets to fetch.
     *
     * @returns The list tweets in the given list.
     *
     * @example
     * ```
     * import { Rettiwt } from 'rettiwt-api';
     *
     * // Creating a new Rettiwt instance using the given 'API_KEY'
     * const rettiwt = new Rettiwt({ apiKey: API_KEY });
     *
     * // Fetching the most recent 100 tweets of the Twitter list with id '1234567890'
     * rettiwt.tweet.list('1234567890')
     * .then(res => {
     * 	console.log(res);
     * })
     * .catch(err => {
     * 	console.log(err);
     * });
     * ```
     *
     * @remarks Due a bug in Twitter API, the count is ignored when no cursor is provided and defaults to 100.
     */
    TweetService.prototype.list = function (id, count, cursor) {
        return __awaiter(this, void 0, void 0, function () {
            var resource, response, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        resource = Resource_1.EResourceType.LIST_TWEETS;
                        return [4 /*yield*/, this.request(resource, {
                                id: id,
                                count: count,
                                cursor: cursor,
                            })];
                    case 1:
                        response = _a.sent();
                        data = Extractors_1.extractors[resource](response);
                        // Sorting the tweets by date, from recent to oldest
                        data.list.sort(function (a, b) { return new Date(b.createdAt).valueOf() - new Date(a.createdAt).valueOf(); });
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Post a tweet.
     *
     * @param options - The options describing the tweet to be posted. Check {@link TweetArgs} for available options.
     *
     * @returns The id of the posted tweet.
     *
     * @example
     * Posting a simple text
     * ```
     * import { Rettiwt } from 'rettiwt-api';
     *
     * // Creating a new Rettiwt instance using the given 'API_KEY'
     * const rettiwt = new Rettiwt({ apiKey: API_KEY });
     *
     * // Posting a tweet to twitter
     * rettiwt.tweet.post({ text: 'Hello World!' })
     * .then(res => {
     * 	console.log(res);
     * })
     * .catch(err => {
     * 	console.log(err);
     * });
     * ```
     *
     * @example
     * Posting a tweet with an image that has been already uploaded
     * ```
     * import { Rettiwt } from 'rettiwt-api';
     *
     * // Creating a new Rettiwt instance using the given 'API_KEY'
     * const rettiwt = new Rettiwt({ apiKey: API_KEY });
     *
     * // Posting a tweet, containing an image called 'mountains.jpg', to twitter
     * rettiwt.tweet.post({ text: 'What a nice view!', media: [{ id: '1234567890' }] })
     * .then(res => {
     * 	console.log(res);
     * })
     * .catch(err => {
     * 	console.log(err);
     * });
     * ```
     *
     * @example
     * Posting a reply to a tweet
     * ```
     * import { Rettiwt } from 'rettiwt-api';
     *
     * // Creating a new Rettiwt instance using the given 'API_KEY'
     * const rettiwt = new Rettiwt({ apiKey: API_KEY });
     *
     * // Posting a simple text reply, to a tweet with id "1234567890"
     * rettiwt.tweet.post({ text: 'Hello!', replyTo: "1234567890" })
     * .then(res => {
     * 	console.log(res);
     * })
     * .catch(err => {
     * 	console.log(err);
     * });
     * ```
     *
     * * @example
     * Posting a tweet that quotes another tweet
     * ```
     * import { Rettiwt } from 'rettiwt-api';
     *
     * // Creating a new Rettiwt instance using the given 'API_KEY'
     * const rettiwt = new Rettiwt({ apiKey: API_KEY });
     *
     * // Posting a simple text tweet, quoting a tweet with id "1234567890"
     * rettiwt.tweet.post({ text: 'Hello!', quote: "1234567890" })
     * .then(res => {
     * 	console.log(res);
     * })
     * .catch(err => {
     * 	console.log(err);
     * });
     * ```
     */
    TweetService.prototype.post = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var resource, response, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        resource = Resource_1.EResourceType.TWEET_POST;
                        return [4 /*yield*/, this.request(resource, { tweet: options })];
                    case 1:
                        response = _a.sent();
                        data = Extractors_1.extractors[resource](response);
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Retweet a tweet.
     *
     * @param id - The id of the target tweet.
     *
     * @returns Whether retweeting was successful or not.
     *
     * @example
     * ```
     * import { Rettiwt } from 'rettiwt-api';
     *
     * // Creating a new Rettiwt instance using the given 'API_KEY'
     * const rettiwt = new Rettiwt({ apiKey: API_KEY });
     *
     * // Retweeting the Tweet with id '1234567890'
     * rettiwt.tweet.retweet('1234567890')
     * .then(res => {
     * 	console.log(res);
     * })
     * .catch(err => {
     * 	console.log(err);
     * });
     * ```
     */
    TweetService.prototype.retweet = function (id) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var resource, response, data;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        resource = Resource_1.EResourceType.TWEET_RETWEET;
                        return [4 /*yield*/, this.request(resource, { id: id })];
                    case 1:
                        response = _b.sent();
                        data = (_a = Extractors_1.extractors[resource](response)) !== null && _a !== void 0 ? _a : false;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Get the list of users who retweeted a tweet.
     *
     * @param id - The id of the target tweet.
     * @param count - The number of retweeters to fetch, must be \<= 100.
     * @param cursor - The cursor to the batch of retweeters to fetch.
     *
     * @returns The list of users who retweeted the given tweet.
     *
     * @example
     * ```
     * import { Rettiwt } from 'rettiwt-api';
     *
     * // Creating a new Rettiwt instance using the given 'API_KEY'
     * const rettiwt = new Rettiwt({ apiKey: API_KEY });
     *
     * // Fetching the most recent 100 retweeters of the Tweet with id '1234567890'
     * rettiwt.tweet.retweeters('1234567890')
     * .then(res => {
     * 	console.log(res);
     * })
     * .catch(err => {
     * 	console.log(err);
     * });
     * ```
     */
    TweetService.prototype.retweeters = function (id, count, cursor) {
        return __awaiter(this, void 0, void 0, function () {
            var resource, response, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        resource = Resource_1.EResourceType.TWEET_RETWEETERS;
                        return [4 /*yield*/, this.request(resource, {
                                id: id,
                                count: count,
                                cursor: cursor,
                            })];
                    case 1:
                        response = _a.sent();
                        data = Extractors_1.extractors[resource](response);
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Schedule a tweet.
     *
     * @param options - The options describing the tweet to be posted. Check {@link TweetArgs} for available options.
     *
     * @returns The id of the schedule.
     *
     * @example
     * Scheduling a simple text
     * ```
     * import { Rettiwt } from 'rettiwt-api';
     *
     * // Creating a new Rettiwt instance using the given 'API_KEY'
     * const rettiwt = new Rettiwt({ apiKey: API_KEY });
     *
     * // Scheduling a tweet to posted at 19th of August, 2024, at 11:59:00 AM, in local time
     * rettiwt.tweet.schedule({ text: 'Hello World!', scheduleFor: new Date('2024-08-19 23:59:00') })
     * .then(res => {
     * 	console.log(res);
     * })
     * .catch(err => {
     * 	console.log(err);
     * });
     * ```
     *
     * @remarks
     * Scheduling a tweet is similar to {@link post}ing, except that an extra parameter called `scheduleFor` is used.
     */
    TweetService.prototype.schedule = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var resource, response, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        resource = Resource_1.EResourceType.TWEET_SCHEDULE;
                        return [4 /*yield*/, this.request(resource, { tweet: options })];
                    case 1:
                        response = _a.sent();
                        data = Extractors_1.extractors[resource](response);
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Search for tweets using a filter.
     *
     * @param filter - The filter to be used for searching the tweets.
     * @param count - The number of tweets to fetch, must be \<= 20.
     * @param cursor - The cursor to the batch of tweets to fetch.
     *
     * @returns The list of tweets that match the given filter.
     *
     * @example
     * ```
     * import { Rettiwt } from 'rettiwt-api';
     *
     * // Creating a new Rettiwt instance using the given 'API_KEY'
     * const rettiwt = new Rettiwt({ apiKey: API_KEY });
     *
     * // Fetching the most recent 5 tweets from user 'user1'
     * rettiwt.tweet.search({ fromUsers: ['user1'] }, 5)
     * .then(res => {
     * 	console.log(res);
     * })
     * .catch(err => {
     * 	console.log(err);
     * });
     * ```
     *
     * @remarks For details about available filters, refer to {@link TweetFilter}
     */
    TweetService.prototype.search = function (filter, count, cursor) {
        return __awaiter(this, void 0, void 0, function () {
            var resource, response, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        resource = Resource_1.EResourceType.TWEET_SEARCH;
                        return [4 /*yield*/, this.request(resource, {
                                filter: filter,
                                count: count,
                                cursor: cursor,
                            })];
                    case 1:
                        response = _a.sent();
                        data = Extractors_1.extractors[resource](response);
                        // Sorting the tweets by date, from recent to oldest
                        data.list.sort(function (a, b) { return new Date(b.createdAt).valueOf() - new Date(a.createdAt).valueOf(); });
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Stream tweets in pseudo real-time using a filter.
     *
     * @param filter - The filter to be used for searching the tweets.
     * @param pollingInterval - The interval in milliseconds to poll for new tweets. Default interval is 60000 ms.
     *
     * @returns An async generator that yields matching tweets as they are found.
     *
     * @example
     * ```
     * import { Rettiwt } from 'rettiwt-api';
     *
     * // Creating a new Rettiwt instance using the given 'API_KEY'
     * const rettiwt = new Rettiwt({ apiKey: API_KEY });
     *
     * // Streaming all upcoming tweets from user 'user1'
     * (async () => {
     * 	try {
     * 		for await (const tweet of rettiwt.tweet.stream({ fromUsers: ['user1'] }, 1000)) {
     * 			console.log(tweet.fullText);
     * 		}
     * 	}
     * 	catch (err) {
     * 		console.log(err);
     * 	}
     * })();
     * ```
     */
    TweetService.prototype.stream = function (filter, pollingInterval) {
        if (pollingInterval === void 0) { pollingInterval = 60000; }
        return __asyncGenerator(this, arguments, function stream_1() {
            var startDate, cursor, sinceId, nextSinceId, tweets, _i, _a, tweet;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        startDate = new Date();
                        cursor = undefined;
                        sinceId = undefined;
                        nextSinceId = undefined;
                        _b.label = 1;
                    case 1:
                        if (!true) return [3 /*break*/, 9];
                        // Pause execution for the specified polling interval before proceeding to the next iteration
                        return [4 /*yield*/, __await(new Promise(function (resolve) { return setTimeout(resolve, pollingInterval); }))];
                    case 2:
                        // Pause execution for the specified polling interval before proceeding to the next iteration
                        _b.sent();
                        return [4 /*yield*/, __await(this.search(__assign(__assign({}, filter), { startDate: startDate, sinceId: sinceId }), undefined, cursor))];
                    case 3:
                        tweets = _b.sent();
                        _i = 0, _a = tweets.list;
                        _b.label = 4;
                    case 4:
                        if (!(_i < _a.length)) return [3 /*break*/, 8];
                        tweet = _a[_i];
                        return [4 /*yield*/, __await(tweet)];
                    case 5: return [4 /*yield*/, _b.sent()];
                    case 6:
                        _b.sent();
                        _b.label = 7;
                    case 7:
                        _i++;
                        return [3 /*break*/, 4];
                    case 8:
                        // Store the most recent tweet ID from this batch
                        if (tweets.list.length > 0 && cursor === undefined) {
                            nextSinceId = tweets.list[0].id;
                        }
                        // If there are more tweets to fetch, adjust the cursor value
                        if (tweets.list.length > 0 && tweets.next) {
                            cursor = tweets.next.value;
                        }
                        // Else, start the next iteration from this batch's most recent tweet
                        else {
                            sinceId = nextSinceId;
                            cursor = undefined;
                        }
                        return [3 /*break*/, 1];
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Unlike a tweet.
     *
     * @param id - The id of the target tweet.
     *
     * @returns Whether unliking was successful or not.
     *
     * @example
     * ```
     * import { Rettiwt } from 'rettiwt-api';
     *
     * // Creating a new Rettiwt instance using the given 'API_KEY'
     * const rettiwt = new Rettiwt({ apiKey: API_KEY });
     *
     * // Unliking the Tweet with id '1234567890'
     * rettiwt.tweet.unlike('1234567890')
     * .then(res => {
     * 	console.log(res);
     * })
     * .catch(err => {
     * 	console.log(err);
     * });
     * ```
     */
    TweetService.prototype.unlike = function (id) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var resource, response, data;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        resource = Resource_1.EResourceType.TWEET_UNLIKE;
                        return [4 /*yield*/, this.request(resource, { id: id })];
                    case 1:
                        response = _b.sent();
                        data = (_a = Extractors_1.extractors[resource](response)) !== null && _a !== void 0 ? _a : false;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Unpost a tweet.
     *
     * @param id - The id of the target tweet.
     *
     * @returns Whether unposting was successful or not.
     *
     * @example
     * ```
     * import { Rettiwt } from 'rettiwt-api';
     *
     * // Creating a new Rettiwt instance using the given 'API_KEY'
     * const rettiwt = new Rettiwt({ apiKey: API_KEY });
     *
     * // Unposting the Tweet with id '1234567890'
     * rettiwt.tweet.unpost('1234567890')
     * .then(res => {
     * 	console.log(res);
     * })
     * .catch(err => {
     * 	console.log(err);
     * });
     * ```
     */
    TweetService.prototype.unpost = function (id) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var resource, response, data;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        resource = Resource_1.EResourceType.TWEET_UNPOST;
                        return [4 /*yield*/, this.request(resource, { id: id })];
                    case 1:
                        response = _b.sent();
                        data = (_a = Extractors_1.extractors[resource](response)) !== null && _a !== void 0 ? _a : false;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Unretweet a tweet.
     *
     * @param id - The id of the target tweet.
     *
     * @returns Whether unretweeting was successful or not.
     *
     * @example
     * ```
     * import { Rettiwt } from 'rettiwt-api';
     *
     * // Creating a new Rettiwt instance using the given 'API_KEY'
     * const rettiwt = new Rettiwt({ apiKey: API_KEY });
     *
     * // Unretweeting the Tweet with id '1234567890'
     * rettiwt.tweet.unretweet('1234567890')
     * .then(res => {
     * 	console.log(res);
     * })
     * .catch(err => {
     * 	console.log(err);
     * });
     * ```
     */
    TweetService.prototype.unretweet = function (id) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var resource, response, data;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        resource = Resource_1.EResourceType.TWEET_UNRETWEET;
                        return [4 /*yield*/, this.request(resource, { id: id })];
                    case 1:
                        response = _b.sent();
                        data = (_a = Extractors_1.extractors[resource](response)) !== null && _a !== void 0 ? _a : false;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Unschedule a tweet.
     *
     * @param id - The id of the scheduled tweet.
     *
     * @returns Whether unscheduling was successful or not.
     *
     * @example
     * ```
     * import { Rettiwt } from 'rettiwt-api';
     *
     * // Creating a new Rettiwt instance using the given 'API_KEY'
     * const rettiwt = new Rettiwt({ apiKey: API_KEY });
     *
     * // Unscheduling the Tweet with id '1234567890'
     * rettiwt.tweet.unschedule('1234567890')
     * .then(res => {
     * 	console.log(res);
     * })
     * .catch(err => {
     * 	console.log(err);
     * });
     * ```
     */
    TweetService.prototype.unschedule = function (id) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var resource, response, data;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        resource = Resource_1.EResourceType.TWEET_UNSCHEDULE;
                        return [4 /*yield*/, this.request(resource, { id: id })];
                    case 1:
                        response = _b.sent();
                        data = (_a = Extractors_1.extractors[resource](response)) !== null && _a !== void 0 ? _a : false;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Upload a media file to Twitter.
     *
     * @param media - The path or ArrayBuffer to the media file to upload.
     *
     * @returns The id of the uploaded media.
     *
     * @example
     * ```
     * import { Rettiwt } from 'rettiwt-api';
     *
     * // Creating a new Rettiwt instance using the given 'API_KEY'
     * const rettiwt = new Rettiwt({ apiKey: API_KEY });
     *
     * // Uploading a file called mountains.jpg
     * rettiwt.tweet.upload('mountains.jpg')
     * .then(res => {
     * 	console.log(res);
     * })
     * .catch(err => {
     * 	console.log(err);
     * });
     * ```
     *
     * @remarks
     * - The uploaded media exists for 24 hrs within which it can be included in a tweet to be posted.
     * If not posted in a tweet within this period, the uploaded media is removed.
     * - Instead of a path to the media, an ArrayBuffer containing the media can also be uploaded.
     */
    TweetService.prototype.upload = function (media) {
        return __awaiter(this, void 0, void 0, function () {
            var size, id;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        size = typeof media == 'string' ? (0, fs_1.statSync)(media).size : media.byteLength;
                        return [4 /*yield*/, this.request(Resource_1.EResourceType.MEDIA_UPLOAD_INITIALIZE, {
                                upload: { size: size },
                            })];
                    case 1:
                        id = (_a.sent()).media_id_string;
                        // APPEND
                        return [4 /*yield*/, this.request(Resource_1.EResourceType.MEDIA_UPLOAD_APPEND, { upload: { id: id, media: media } })];
                    case 2:
                        // APPEND
                        _a.sent();
                        // FINALIZE
                        return [4 /*yield*/, this.request(Resource_1.EResourceType.MEDIA_UPLOAD_FINALIZE, { upload: { id: id } })];
                    case 3:
                        // FINALIZE
                        _a.sent();
                        return [2 /*return*/, id];
                }
            });
        });
    };
    return TweetService;
}(FetcherService_1.FetcherService));
exports.TweetService = TweetService;
//# sourceMappingURL=TweetService.js.map