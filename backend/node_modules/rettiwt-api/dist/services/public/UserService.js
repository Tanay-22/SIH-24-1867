"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserService = void 0;
var Extractors_1 = require("../../collections/Extractors");
var Resource_1 = require("../../enums/Resource");
var FetcherService_1 = require("./FetcherService");
/**
 * Handles interacting with resources related to user account
 *
 * @public
 */
var UserService = /** @class */ (function (_super) {
    __extends(UserService, _super);
    /**
     * @param config - The config object for configuring the Rettiwt instance.
     *
     * @internal
     */
    function UserService(config) {
        return _super.call(this, config) || this;
    }
    /**
     * Get the details of a user.
     *
     * @param id - The username/id of the target user.
     *
     * @returns
     * The details of the given user.
     * If no user matches the given id, returns `undefined`.
     *
     * @example
     * Fetching the details using username
     * ```
     * import { Rettiwt } from 'rettiwt-api';
     *
     * // Creating a new Rettiwt instance using the given 'API_KEY'
     * const rettiwt = new Rettiwt({ apiKey: API_KEY });
     *
     * // Fetching the details of the User with username 'user1'
     * rettiwt.user.details('user1')
     * .then(res => {
     * 	console.log(res);
     * })
     * .catch(err => {
     * 	console.log(err);
     * });
     * ```
     *
     * @example
     * Fetching the details using id
     * ```
     * import { Rettiwt } from 'rettiwt-api';
     *
     * // Creating a new Rettiwt instance using the given 'API_KEY'
     * const rettiwt = new Rettiwt({ apiKey: API_KEY });
     *
     * // Fetching the details of the User with id '1234567890'
     * rettiwt.user.details('1234567890')
     * .then(res => {
     * 	console.log(res);
     * })
     * .catch(err => {
     * 	console.log(err);
     * });
     * ```
     */
    UserService.prototype.details = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var resource, response, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // If username is given
                        if (isNaN(Number(id))) {
                            resource = Resource_1.EResourceType.USER_DETAILS_BY_USERNAME;
                        }
                        // If id is given
                        else {
                            resource = Resource_1.EResourceType.USER_DETAILS_BY_ID;
                        }
                        return [4 /*yield*/, this.request(resource, { id: id })];
                    case 1:
                        response = _a.sent();
                        data = Extractors_1.extractors[resource](response);
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Follow a user.
     *
     * @param id - The id the user to be followed.
     *
     * @returns Whether following was successful or not.
     *
     * @throws Code 108 if given user id is invalid.
     *
     * @example
     * ```
     * import { Rettiwt } from 'rettiwt-api';
     *
     * // Creating a new Rettiwt instance using the given 'API_KEY'
     * const rettiwt = new Rettiwt({ apiKey: API_KEY });
     *
     * // Following the User with id '1234567890'
     * rettiwt.user.follow('1234567890')
     * .then(res => {
     * 	console.log(res);
     * })
     * .catch(err => {
     * 	console.log(err);
     * });
     * ```
     */
    UserService.prototype.follow = function (id) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var resource, response, data;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        resource = Resource_1.EResourceType.USER_FOLLOW;
                        return [4 /*yield*/, this.request(Resource_1.EResourceType.USER_FOLLOW, { id: id })];
                    case 1:
                        response = _b.sent();
                        data = (_a = Extractors_1.extractors[resource](response)) !== null && _a !== void 0 ? _a : false;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Get the followed feed of the logged in user.
     *
     * @param cursor - The cursor to the batch of feed items to fetch.
     *
     * @returns - The followed feed of the logged-in user.
     *
     * @example
     * ```
     * import { Rettiwt } from 'rettiwt-api';
     *
     * // Creating a new Rettiwt instance using the given 'API_KEY'
     * const rettiwt = new Rettiwt({ apiKey: API_KEY });
     *
     * // Fetching the first 35 followed feed items of the logged-in user
     * rettiwt.user.followed()
     * .then(res => {
     * 	console.log(res);
     * })
     * .catch(err => {
     * 	console.log(err);
     * });
     * ```
     *
     * @remarks Always returns 35 feed items, with no way to customize the count.
     */
    UserService.prototype.followed = function (cursor) {
        return __awaiter(this, void 0, void 0, function () {
            var resource, response, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        resource = Resource_1.EResourceType.USER_FEED_FOLLOWED;
                        return [4 /*yield*/, this.request(resource, {
                                cursor: cursor,
                            })];
                    case 1:
                        response = _a.sent();
                        data = Extractors_1.extractors[resource](response);
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Get the list followers of a user.
     *
     * @param id - The id of the target user.
     * @param count - The number of followers to fetch, must be \<= 100.
     * @param cursor - The cursor to the batch of followers to fetch.
     *
     * @returns The list of users following the target user.
     *
     * @example
     * ```
     * import { Rettiwt } from 'rettiwt-api';
     *
     * // Creating a new Rettiwt instance using the given 'API_KEY'
     * const rettiwt = new Rettiwt({ apiKey: API_KEY });
     *
     * // Fetching the first 100 followers of the User with id '1234567890'
     * rettiwt.user.followers('1234567890')
     * .then(res => {
     * 	console.log(res);
     * })
     * .catch(err => {
     * 	console.log(err);
     * });
     * ```
     */
    UserService.prototype.followers = function (id, count, cursor) {
        return __awaiter(this, void 0, void 0, function () {
            var resource, response, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        resource = Resource_1.EResourceType.USER_FOLLOWERS;
                        return [4 /*yield*/, this.request(resource, {
                                id: id,
                                count: count,
                                cursor: cursor,
                            })];
                    case 1:
                        response = _a.sent();
                        data = Extractors_1.extractors[resource](response);
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Get the list of users who are followed by a user.
     *
     * @param id - The id of the target user.
     * @param count - The number of following to fetch, must be \<= 100.
     * @param cursor - The cursor to the batch of following to fetch.
     *
     * @returns The list of users followed by the target user.
     *
     * @example
     * ```
     * import { Rettiwt } from 'rettiwt-api';
     *
     * // Creating a new Rettiwt instance using the given 'API_KEY'
     * const rettiwt = new Rettiwt({ apiKey: API_KEY });
     *
     * // Fetching the first 100 following of the User with id '1234567890'
     * rettiwt.user.following('1234567890')
     * .then(res => {
     * 	console.log(res);
     * })
     * .catch(err => {
     * 	console.log(err);
     * });
     * ```
     */
    UserService.prototype.following = function (id, count, cursor) {
        return __awaiter(this, void 0, void 0, function () {
            var resource, response, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        resource = Resource_1.EResourceType.USER_FOLLOWING;
                        return [4 /*yield*/, this.request(resource, {
                                id: id,
                                count: count,
                                cursor: cursor,
                            })];
                    case 1:
                        response = _a.sent();
                        data = Extractors_1.extractors[resource](response);
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Get the highlighted tweets of a user.
     *
     * @param id - The id of the target user.
     * @param count - The number of followers to fetch, must be \<= 100.
     * @param cursor - The cursor to the batch of followers to fetch.
     *
     * @returns The list of highlighted tweets of the target user.
     *
     * @example
     * ```
     * import { Rettiwt } from 'rettiwt-api';
     *
     * // Creating a new Rettiwt instance using the given 'API_KEY'
     * const rettiwt = new Rettiwt({ apiKey: API_KEY });
     *
     * // Fetching the top 100 highlights of the User with id '1234567890'
     * rettiwt.user.highlights('1234567890')
     * .then(res => {
     * 	console.log(res);
     * })
     * .catch(err => {
     * 	console.log(err);
     * });
     * ```
     */
    UserService.prototype.highlights = function (id, count, cursor) {
        return __awaiter(this, void 0, void 0, function () {
            var resource, response, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        resource = Resource_1.EResourceType.USER_HIGHLIGHTS;
                        return [4 /*yield*/, this.request(resource, {
                                id: id,
                                count: count,
                                cursor: cursor,
                            })];
                    case 1:
                        response = _a.sent();
                        data = Extractors_1.extractors[resource](response);
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Get the list of tweets liked by the logged in user.
     *
     * @param count - The number of likes to fetch, must be \<= 100.
     * @param cursor - The cursor to the batch of likes to fetch.
     *
     * @returns The list of tweets liked by the target user.
     *
     * @example
     * ```
     * import { Rettiwt } from 'rettiwt-api';
     *
     * // Creating a new Rettiwt instance using the given 'API_KEY'
     * const rettiwt = new Rettiwt({ apiKey: API_KEY });
     *
     * // Fetching the most recent 100 liked Tweets of the logged in User
     * rettiwt.user.likes()
     * .then(res => {
     * 	console.log(res);
     * })
     * .catch(err => {
     * 	console.log(err);
     * });
     * ```
     */
    UserService.prototype.likes = function (count, cursor) {
        return __awaiter(this, void 0, void 0, function () {
            var resource, response, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        resource = Resource_1.EResourceType.USER_LIKES;
                        return [4 /*yield*/, this.request(resource, {
                                id: this.userId,
                                count: count,
                                cursor: cursor,
                            })];
                    case 1:
                        response = _a.sent();
                        data = Extractors_1.extractors[resource](response);
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Get the media timeline of a user.
     *
     * @param id - The id of the target user.
     * @param count - The number of media to fetch, must be \<= 100.
     * @param cursor - The cursor to the batch of media to fetch
     *
     * @returns The media timeline of the target user.
     *
     * @example
     * ```
     * import { Rettiwt } from 'rettiwt-api';
     *
     * // Creating a new Rettiwt instance using the given 'API_KEY'
     * const rettiwt = new Rettiwt({ apiKey: API_KEY });
     *
     * // Fetching the first 100 timeline media tweets of the User with id '1234567890'
     * rettiwt.user.timeline('1234567890')
     * .then(res => {
     * 	console.log(res);
     * })
     * .catch(err => {
     * 	console.log(err);
     * });
     * ```
     */
    UserService.prototype.media = function (id, count, cursor) {
        return __awaiter(this, void 0, void 0, function () {
            var resource, response, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        resource = Resource_1.EResourceType.USER_MEDIA;
                        return [4 /*yield*/, this.request(resource, {
                                id: id,
                                count: count,
                                cursor: cursor,
                            })];
                    case 1:
                        response = _a.sent();
                        data = Extractors_1.extractors[resource](response);
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Stream notifications of the logged in user in pseudo real-time.
     *
     * @param pollingInterval - The interval in milliseconds to poll for new tweets. Default interval is 60000 ms.
     *
     * @returns An async generator that yields new notifications as they are received.
     *
     * @example
     * ```
     * import { Rettiwt } from 'rettiwt-api';
     *
     * // Creating a new Rettiwt instance using the given 'API_KEY'
     * const rettiwt = new Rettiwt({ apiKey: API_KEY });
     *
     * // Creating a function that streams all new notifications
     * async function streamNotifications() {
     * 	try {
     * 		// Awaiting for the notifications returned by the AsyncGenerator returned by the method
     * 		for await (const notification of rettiwt.user.notifications(1000)) {
     * 			console.log(notification.message);
     * 		}
     * 	}
     * 	catch (err) {
     * 		console.log(err);
     * 	}
     * }
     *
     * // Calling the function
     * streamNotifications();
     * ```
     */
    UserService.prototype.notifications = function (pollingInterval) {
        if (pollingInterval === void 0) { pollingInterval = 60000; }
        return __asyncGenerator(this, arguments, function notifications_1() {
            var resource, first, cursor, response, notifications, _i, _a, notification;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        resource = Resource_1.EResourceType.USER_NOTIFICATIONS;
                        first = true;
                        cursor = undefined;
                        _b.label = 1;
                    case 1:
                        if (!true) return [3 /*break*/, 11];
                        // Pause execution for the specified polling interval before proceeding to the next iteration
                        return [4 /*yield*/, __await(new Promise(function (resolve) { return setTimeout(resolve, pollingInterval); }))];
                    case 2:
                        // Pause execution for the specified polling interval before proceeding to the next iteration
                        _b.sent();
                        return [4 /*yield*/, __await(this.request(resource, {
                                count: 40,
                                cursor: cursor,
                            }))];
                    case 3:
                        response = _b.sent();
                        notifications = Extractors_1.extractors[resource](response);
                        // Sorting the notifications by time, from oldest to recent
                        notifications.list.sort(function (a, b) { return new Date(a.receivedAt).valueOf() - new Date(b.receivedAt).valueOf(); });
                        if (!!first) return [3 /*break*/, 9];
                        _i = 0, _a = notifications.list;
                        _b.label = 4;
                    case 4:
                        if (!(_i < _a.length)) return [3 /*break*/, 8];
                        notification = _a[_i];
                        return [4 /*yield*/, __await(notification)];
                    case 5: return [4 /*yield*/, _b.sent()];
                    case 6:
                        _b.sent();
                        _b.label = 7;
                    case 7:
                        _i++;
                        return [3 /*break*/, 4];
                    case 8: return [3 /*break*/, 10];
                    case 9:
                        first = false;
                        _b.label = 10;
                    case 10:
                        cursor = notifications.next.value;
                        return [3 /*break*/, 1];
                    case 11: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get the recommended feed of the logged in user.
     *
     * @param cursor - The cursor to the batch of feed items to fetch.
     *
     * @returns - The recommended feed of the logged-in user.
     *
     * @example
     * ```
     * import { Rettiwt } from 'rettiwt-api';
     *
     * // Creating a new Rettiwt instance using the given 'API_KEY'
     * const rettiwt = new Rettiwt({ apiKey: API_KEY });
     *
     * // Fetching the first 35 recommended feed items of the logged-in user
     * rettiwt.user.recommended()
     * .then(res => {
     * 	console.log(res);
     * })
     * .catch(err => {
     * 	console.log(err);
     * });
     * ```
     *
     * @remarks Always returns 35 feed items, with no way to customize the count.
     */
    UserService.prototype.recommended = function (cursor) {
        return __awaiter(this, void 0, void 0, function () {
            var resource, response, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        resource = Resource_1.EResourceType.USER_FEED_RECOMMENDED;
                        return [4 /*yield*/, this.request(resource, {
                                cursor: cursor,
                            })];
                    case 1:
                        response = _a.sent();
                        data = Extractors_1.extractors[resource](response);
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Get the reply timeline of a user.
     *
     * @param id - The id of the target user.
     * @param count - The number of replies to fetch, must be \<= 20.
     * @param cursor - The cursor to the batch of replies to fetch.
     *
     * @returns The reply timeline of the target user.
     *
     * @example
     * ```
     * import { Rettiwt } from 'rettiwt-api';
     *
     * // Creating a new Rettiwt instance using the given 'API_KEY'
     * const rettiwt = new Rettiwt({ apiKey: API_KEY });
     *
     * // Fetching the first 100 timeline replies of the User with id '1234567890'
     * rettiwt.user.replies('1234567890')
     * .then(res => {
     * 	console.log(res);
     * })
     * .catch(err => {
     * 	console.log(err);
     * });
     * ```
     *
     * @remarks If the target user has a pinned tweet, the returned reply timeline has one item extra and this is always the pinned tweet.
     */
    UserService.prototype.replies = function (id, count, cursor) {
        return __awaiter(this, void 0, void 0, function () {
            var resource, response, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        resource = Resource_1.EResourceType.USER_TIMELINE_AND_REPLIES;
                        return [4 /*yield*/, this.request(resource, {
                                id: id,
                                count: count,
                                cursor: cursor,
                            })];
                    case 1:
                        response = _a.sent();
                        data = Extractors_1.extractors[resource](response);
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Get the list of subscriptions of a user.
     *
     * @param id - The id of the target user.
     * @param count - The number of subscriptions to fetch, must be \<= 100.
     * @param cursor - The cursor to the batch of subscriptions to fetch.
     *
     * @returns The list of subscriptions by the target user.
     *
     * @example
     * ```
     * import { Rettiwt } from 'rettiwt-api';
     *
     * // Creating a new Rettiwt instance using the given 'API_KEY'
     * const rettiwt = new Rettiwt({ apiKey: API_KEY });
     *
     * // Fetching the first 100 subscriptions of the User with id '1234567890'
     * rettiwt.user.subscriptions('1234567890')
     * .then(res => {
     * 	console.log(res);
     * })
     * .catch(err => {
     * 	console.log(err);
     * });
     * ```
     */
    UserService.prototype.subscriptions = function (id, count, cursor) {
        return __awaiter(this, void 0, void 0, function () {
            var resource, response, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        resource = Resource_1.EResourceType.USER_SUBSCRIPTIONS;
                        return [4 /*yield*/, this.request(resource, {
                                id: id,
                                count: count,
                                cursor: cursor,
                            })];
                    case 1:
                        response = _a.sent();
                        data = Extractors_1.extractors[resource](response);
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Get the tweet timeline of a user.
     *
     * @param id - The id of the target user.
     * @param count - The number of timeline items to fetch, must be \<= 20.
     * @param cursor - The cursor to the batch of timeline items to fetch.
     *
     * @returns The timeline of the target user.
     *
     * @example
     * ```
     * import { Rettiwt } from 'rettiwt-api';
     *
     * // Creating a new Rettiwt instance using the given 'API_KEY'
     * const rettiwt = new Rettiwt({ apiKey: API_KEY });
     *
     * // Fetching the first 20 timeline tweets of the User with id '1234567890'
     * rettiwt.user.timeline('1234567890')
     * .then(res => {
     * 	console.log(res);
     * })
     * .catch(err => {
     * 	console.log(err);
     * });
     * ```
     *
     * @remarks
     * - If the target user has a pinned tweet, the returned timeline has one item extra and this is always the pinned tweet.
     * - If timeline is fetched without authenticating, then the most popular tweets of the target user are returned instead.
     */
    UserService.prototype.timeline = function (id, count, cursor) {
        return __awaiter(this, void 0, void 0, function () {
            var resource, response, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        resource = Resource_1.EResourceType.USER_TIMELINE;
                        return [4 /*yield*/, this.request(resource, {
                                id: id,
                                count: count,
                                cursor: cursor,
                            })];
                    case 1:
                        response = _a.sent();
                        data = Extractors_1.extractors[resource](response);
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Unfollow a user.
     *
     * @param id - The id the user to be unfollowed.
     *
     * @returns Whether unfollowing was successful or not.
     *
     * @throws Code 34 if given user id is invalid.
     *
     * @example
     * ```
     * import { Rettiwt } from 'rettiwt-api';
     *
     * // Creating a new Rettiwt instance using the given 'API_KEY'
     * const rettiwt = new Rettiwt({ apiKey: API_KEY });
     *
     * // Unfollowing the User with id '12345678'
     * rettiwt.user.unfollow('12345678')
     * .then(res => {
     * 	console.log(res);
     * })
     * .catch(err => {
     * 	console.log(err);
     * });
     * ```
     */
    UserService.prototype.unfollow = function (id) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var resource, response, data;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        resource = Resource_1.EResourceType.USER_UNFOLLOW;
                        return [4 /*yield*/, this.request(Resource_1.EResourceType.USER_UNFOLLOW, { id: id })];
                    case 1:
                        response = _b.sent();
                        data = (_a = Extractors_1.extractors[resource](response)) !== null && _a !== void 0 ? _a : false;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    return UserService;
}(FetcherService_1.FetcherService));
exports.UserService = UserService;
//# sourceMappingURL=UserService.js.map