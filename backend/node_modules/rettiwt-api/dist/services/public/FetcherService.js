"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FetcherService = void 0;
var https_1 = __importDefault(require("https"));
var axios_1 = __importDefault(require("axios"));
var https_proxy_agent_1 = require("https-proxy-agent");
var rettiwt_auth_1 = require("rettiwt-auth");
var Groups_1 = require("../../collections/Groups");
var Requests_1 = require("../../collections/Requests");
var Api_1 = require("../../enums/Api");
var Logging_1 = require("../../enums/Logging");
var FetchArgs_1 = require("../../models/args/FetchArgs");
var PostArgs_1 = require("../../models/args/PostArgs");
var ErrorService_1 = require("../internal/ErrorService");
var LogService_1 = require("../internal/LogService");
var AuthService_1 = require("./AuthService");
/**
 * The base service that handles all HTTP requests.
 *
 * @public
 */
var FetcherService = /** @class */ (function () {
    /**
     * @param config - The config object for configuring the Rettiwt instance.
     */
    function FetcherService(config) {
        var _a, _b, _c, _d;
        LogService_1.LogService.enabled = (_a = config === null || config === void 0 ? void 0 : config.logging) !== null && _a !== void 0 ? _a : false;
        this.apiKey = config === null || config === void 0 ? void 0 : config.apiKey;
        this.guestKey = config === null || config === void 0 ? void 0 : config.guestKey;
        this.userId = (config === null || config === void 0 ? void 0 : config.apiKey) ? AuthService_1.AuthService.getUserId(config.apiKey) : undefined;
        this.authProxyUrl = (_b = config === null || config === void 0 ? void 0 : config.authProxyUrl) !== null && _b !== void 0 ? _b : config === null || config === void 0 ? void 0 : config.proxyUrl;
        this.proxyUrl = config === null || config === void 0 ? void 0 : config.proxyUrl;
        this.timeout = (_c = config === null || config === void 0 ? void 0 : config.timeout) !== null && _c !== void 0 ? _c : 0;
        this.errorHandler = (_d = config === null || config === void 0 ? void 0 : config.errorHandler) !== null && _d !== void 0 ? _d : new ErrorService_1.ErrorService();
    }
    /**
     * Checks the authorization status based on the requested resource.
     *
     * @param resource - The requested resource.
     *
     * @throws An error if not authorized to access the requested resource.
     */
    FetcherService.prototype.checkAuthorization = function (resource) {
        // Logging
        LogService_1.LogService.log(Logging_1.ELogActions.AUTHORIZATION, { authenticated: this.userId != undefined });
        // Checking authorization status
        if (!Groups_1.allowGuestAuthentication.includes(resource) && this.userId == undefined) {
            throw new Error(Api_1.EApiErrors.RESOURCE_NOT_ALLOWED);
        }
    };
    /**
     * Returns the AuthCredentials based on the type of key present.
     *
     * @returns The generated AuthCredential
     */
    FetcherService.prototype.getCredential = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.apiKey) return [3 /*break*/, 1];
                        // Logging
                        LogService_1.LogService.log(Logging_1.ELogActions.GET, { target: 'USER_CREDENTIAL' });
                        return [2 /*return*/, new rettiwt_auth_1.AuthCredential(AuthService_1.AuthService.decodeCookie(this.apiKey).split(';'))];
                    case 1:
                        if (!this.guestKey) return [3 /*break*/, 2];
                        // Logging
                        LogService_1.LogService.log(Logging_1.ELogActions.GET, { target: 'GUEST_CREDENTIAL' });
                        return [2 /*return*/, new rettiwt_auth_1.AuthCredential(undefined, this.guestKey)];
                    case 2:
                        // Logging
                        LogService_1.LogService.log(Logging_1.ELogActions.GET, { target: 'NEW_GUEST_CREDENTIAL' });
                        return [4 /*yield*/, new rettiwt_auth_1.Auth({ proxyUrl: this.authProxyUrl }).getGuestCredential()];
                    case 3: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Gets the https agent based on whether a proxy is used or not.
     *
     * @param proxyUrl - Optional URL with proxy configuration to use for requests to Twitter API.
     *
     * @returns The https agent to use.
     */
    FetcherService.prototype.getHttpsAgent = function (proxyUrl) {
        if (proxyUrl) {
            // Logging
            LogService_1.LogService.log(Logging_1.ELogActions.GET, { target: 'HTTPS_PROXY_AGENT' });
            return new https_proxy_agent_1.HttpsProxyAgent(proxyUrl);
        }
        else {
            // Logging
            LogService_1.LogService.log(Logging_1.ELogActions.GET, { target: 'HTTPS_AGENT' });
            return new https_1.default.Agent();
        }
    };
    /**
     * Validates the given args against the given resource.
     *
     * @param resource - The resource against which validation is to be done.
     * @param args - The args to be validated.
     *
     * @returns The validated args.
     */
    FetcherService.prototype.validateArgs = function (resource, args) {
        if (Groups_1.fetchResources.includes(resource)) {
            // Logging
            LogService_1.LogService.log(Logging_1.ELogActions.VALIDATE, { target: 'FETCH_ARGS' });
            return new FetchArgs_1.FetchArgs(resource, args);
        }
        else if (Groups_1.postResources.includes(resource)) {
            // Logging
            LogService_1.LogService.log(Logging_1.ELogActions.VALIDATE, { target: 'POST_ARGS' });
            return new PostArgs_1.PostArgs(resource, args);
        }
    };
    /**
     * Makes an HTTP request according to the given parameters.
     *
     * @param resource - The requested resource.
     * @param config - The request configuration.
     *
     * @typeParam T - The type of the returned response data.
     *
     * @returns The raw data response received.
     *
     * @example
     * Fetching the raw details of a user with username 'user1'
     * ```
     * import { FetcherService, EResourceType } from 'rettiwt-api';
     *
     * // Creating a new FetcherService instance using the given 'API_KEY'
     * const fetcher = new FetcherService({ apiKey: API_KEY });
     *
     * // Fetching the details of the User with username 'user1'
     * fetcher.request(EResourceType.USER_DETAILS_BY_USERNAME, { id: 'user1' })
     * .then(res => {
     * 	console.log(res);
     * })
     * .catch(err => {
     * 	console.log(err);
     * })
     * ```
     */
    FetcherService.prototype.request = function (resource, args) {
        return __awaiter(this, void 0, void 0, function () {
            var httpsAgent, cred, config, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // Logging
                        LogService_1.LogService.log(Logging_1.ELogActions.REQUEST, { resource: resource, args: args });
                        // Checking authorization for the requested resource
                        this.checkAuthorization(resource);
                        // Validating args
                        args = this.validateArgs(resource, args);
                        httpsAgent = this.getHttpsAgent(this.proxyUrl);
                        return [4 /*yield*/, this.getCredential()];
                    case 1:
                        cred = _a.sent();
                        config = Requests_1.requests[resource](args);
                        // Setting additional request parameters
                        config.headers = __assign(__assign({}, config.headers), cred.toHeader());
                        config.httpAgent = httpsAgent;
                        config.httpsAgent = httpsAgent;
                        config.timeout = this.timeout;
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, (0, axios_1.default)(config)];
                    case 3: 
                    // Returning the reponse body
                    return [2 /*return*/, (_a.sent()).data];
                    case 4:
                        error_1 = _a.sent();
                        // If error, delegate handling to error handler
                        this.errorHandler.handle(error_1);
                        throw error_1;
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    return FetcherService;
}());
exports.FetcherService = FetcherService;
//# sourceMappingURL=FetcherService.js.map