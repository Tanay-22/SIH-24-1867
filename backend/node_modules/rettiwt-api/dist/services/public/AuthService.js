"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthService = void 0;
var rettiwt_auth_1 = require("rettiwt-auth");
var Api_1 = require("../../enums/Api");
var FetcherService_1 = require("./FetcherService");
/**
 * The services that handles authentication.
 *
 * @public
 */
var AuthService = /** @class */ (function (_super) {
    __extends(AuthService, _super);
    /**
     * @param config - The config object for configuring the `Rettiwt` instance.
     *
     * @internal
     */
    function AuthService(config) {
        return _super.call(this, config) || this;
    }
    /**
     * Decodes the encoded cookie string.
     *
     * @param encodedCookies - The encoded cookie string to decode.
     * @returns The decoded cookie string.
     */
    AuthService.decodeCookie = function (encodedCookies) {
        // Decoding the encoded cookie string
        var decodedCookies = Buffer.from(encodedCookies, 'base64').toString('ascii');
        return decodedCookies;
    };
    /**
     * Encodes the given cookie string.
     *
     * @param cookieString - The cookie string to encode.
     * @returns The encoded cookie string.
     */
    AuthService.encodeCookie = function (cookieString) {
        // Encoding the cookie string to base64
        var encodedCookies = Buffer.from(cookieString).toString('base64');
        return encodedCookies;
    };
    /**
     * Gets the user's id from the given API key.
     *
     * @param apiKey - The API key.
     * @returns The user id associated with the API key.
     */
    AuthService.getUserId = function (apiKey) {
        // Getting the cookie string from the API key
        var cookieString = AuthService.decodeCookie(apiKey);
        // Searching for the user id in the cookie string
        var searchResults = cookieString.match(/((?<=twid="u=)(.*)(?="))|((?<=twid=u%3D)(.*)(?=;))/);
        // If user id was found
        if (searchResults) {
            return searchResults[0];
        }
        // If user id was not found
        else {
            throw new Error(Api_1.EApiErrors.BAD_AUTHENTICATION);
        }
    };
    /**
     * Login to twitter as guest.
     *
     * @returns A new guest key.
     *
     * @example
     * ```
     * import { Rettiwt } from 'rettiwt-api';
     *
     * // Creating a new Rettiwt instance
     * const rettiwt = new Rettiwt();
     *
     * // Logging in an getting a new guest key
     * rettiwt.auth.guest()
     * .then(guestKey => {
     * 	// Use the guest key
     * 	...
     * })
     * .catch(err => {
     * 	console.log(err);
     * });
     * ```
     */
    AuthService.prototype.guest = function () {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var guestKey;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, new rettiwt_auth_1.Auth().getGuestCredential()];
                    case 1:
                        guestKey = (_a = (_b.sent()).guestToken) !== null && _a !== void 0 ? _a : '';
                        return [2 /*return*/, guestKey];
                }
            });
        });
    };
    /**
     * Login to twitter using account credentials.
     *
     * @param email - The email id associated with the Twitter account.
     * @param userName - The username associated with the Twitter account.
     * @param password - The password to the Twitter account.
     *
     * @returns The `API_KEY` for the Twitter account.
     *
     * @example
     * ```
     * import { Rettiwt } from 'rettiwt-api';
     *
     * // Creating a new Rettiwt instance
     * const rettiwt = new Rettiwt();
     *
     * // Logging in an getting the API_KEY
     * rettiwt.auth.login("email@domain.com", "username", "password")
     * .then(apiKey => {
     * 	// Use the API_KEY
     * 	...
     * })
     * .catch(err => {
     * 	console.log(err);
     * });
     * ```
     *
     * @remarks
     * Interchanging `email` and `userName` works too.
     */
    AuthService.prototype.login = function (email, userName, password) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var apiKey;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, new rettiwt_auth_1.Auth({ proxyUrl: this.authProxyUrl }).getUserCredential({
                            email: email,
                            userName: userName,
                            password: password,
                        })];
                    case 1:
                        apiKey = (_a = (_b.sent()).toHeader().cookie) !== null && _a !== void 0 ? _a : '';
                        // Converting the credentials to base64 string
                        apiKey = AuthService.encodeCookie(apiKey);
                        return [2 /*return*/, apiKey];
                }
            });
        });
    };
    return AuthService;
}(FetcherService_1.FetcherService));
exports.AuthService = AuthService;
//# sourceMappingURL=AuthService.js.map