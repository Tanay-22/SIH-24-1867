"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.findKeyByValue = exports.findByFilter = void 0;
/**
 * Search for all the sub-objects (even deep-nested ones) that have the given key-value pair(filter).
 *
 * @param data - The data on which search is to be performed.
 * @param key - The key of the key-value pair to search.
 * @param value - The value of the key-value pait to search.
 * @returns The list of sub-objects from the given object, having the given key-value pair.
 *
 * @internal
 */
function findByFilter(data, key, value) {
    /**
     * The list containing all the objects matching given filter.
     */
    var res = [];
    /**
     * If the data is an array, recursively run the function of each element of the array and merge the results.
     */
    if (Array.isArray(data)) {
        /**
         * findByFilter returns an array.
         * map() also returns an array.
         * Therefore, map(item =\> findByFilter(.......)) returns an array of arrays.
         * Therefore, using ... operator to spread the 2-D array in 1-D array.
         */
        res = res.concat.apply(res, data.map(function (item) { return findByFilter(item, key, value); }));
    }
    // If the data is an object
    else if (typeof data == 'object') {
        /**
         * If the object includes the key and the value specified by the key matches the filter, add it to the result.
         */
        if (Object.keys(data).includes(key) && data[key] == value) {
            res.push(data);
        }
        /**
         * Recursively run the function on each value specified by each key in the object, for subsequent matches.
         */
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], v = _b[1];
            res = res.concat(findByFilter(v, key, value));
        }
    }
    return res;
}
exports.findByFilter = findByFilter;
/**
 * Searches for the key which has the given value in the given object.
 *
 * @param data - The data on which search is to be performed.
 * @param value - The value to search.
 * @returns The key with the given value.
 *
 * @internal
 */
function findKeyByValue(data, value) {
    // Finding the key-value pairs that have the given value
    var kvPair = Object.entries(data).filter(function (_a) {
        var v = _a[1];
        return v == value;
    })[0];
    // If a match is found
    if (kvPair) {
        return kvPair[0];
    }
    // If no match is found
    else {
        return undefined;
    }
}
exports.findKeyByValue = findKeyByValue;
//# sourceMappingURL=JsonUtils.js.map