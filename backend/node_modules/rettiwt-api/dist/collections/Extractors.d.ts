import { IInitializeMediaUploadResponse, IListTweetsResponse, ITweetDetailsResponse, ITweetLikeResponse, ITweetPostResponse, ITweetRepliesResponse, ITweetRetweetersResponse, ITweetRetweetResponse, ITweetScheduleResponse, ITweetSearchResponse, ITweetUnlikeResponse, ITweetUnpostResponse, ITweetUnretweetResponse, ITweetUnscheduleResponse, IUserDetailsResponse, IUserFollowedResponse, IUserFollowersResponse, IUserFollowingResponse, IUserFollowResponse, IUserHighlightsResponse, IUserLikesResponse, IUserMediaResponse, IUserNotifications as IUserNotificationsResponse, IUserRecommendedResponse, IUserSubscriptionsResponse, IUserTweetsAndRepliesResponse, IUserTweetsResponse, IUserUnfollowResponse } from 'rettiwt-core';
import { CursoredData } from '../models/data/CursoredData';
import { Notification } from '../models/data/Notification';
import { Tweet } from '../models/data/Tweet';
import { User } from '../models/data/User';
/**
 * Collection of data extractors for each resource.
 *
 * @internal
 */
export declare const extractors: {
    LIST_TWEETS: (response: IListTweetsResponse) => CursoredData<Tweet>;
    MEDIA_UPLOAD_APPEND: () => void;
    MEDIA_UPLOAD_FINALIZE: () => void;
    MEDIA_UPLOAD_INITIALIZE: (response: IInitializeMediaUploadResponse) => string;
    TWEET_DETAILS: (response: ITweetDetailsResponse, id: string) => Tweet | undefined;
    TWEET_DETAILS_ALT: (response: ITweetRepliesResponse, id: string) => Tweet | undefined;
    TWEET_LIKE: (response: ITweetLikeResponse) => boolean;
    TWEET_POST: (response: ITweetPostResponse) => string;
    TWEET_RETWEET: (response: ITweetRetweetResponse) => boolean;
    TWEET_RETWEETERS: (response: ITweetRetweetersResponse) => CursoredData<User>;
    TWEET_SCHEDULE: (response: ITweetScheduleResponse) => string;
    TWEET_SEARCH: (response: ITweetSearchResponse) => CursoredData<Tweet>;
    TWEET_UNLIKE: (response: ITweetUnlikeResponse) => boolean;
    TWEET_UNPOST: (response: ITweetUnpostResponse) => boolean;
    TWEET_UNRETWEET: (response: ITweetUnretweetResponse) => boolean;
    TWEET_UNSCHEDULE: (response: ITweetUnscheduleResponse) => boolean;
    USER_DETAILS_BY_USERNAME: (response: IUserDetailsResponse) => User | undefined;
    USER_DETAILS_BY_ID: (response: IUserDetailsResponse) => User | undefined;
    USER_FEED_FOLLOWED: (response: IUserFollowedResponse) => CursoredData<Tweet>;
    USER_FEED_RECOMMENDED: (response: IUserRecommendedResponse) => CursoredData<Tweet>;
    USER_FOLLOW: (response: IUserFollowResponse) => boolean;
    USER_FOLLOWING: (response: IUserFollowingResponse) => CursoredData<User>;
    USER_FOLLOWERS: (response: IUserFollowersResponse) => CursoredData<User>;
    USER_HIGHLIGHTS: (response: IUserHighlightsResponse) => CursoredData<Tweet>;
    USER_LIKES: (response: IUserLikesResponse) => CursoredData<Tweet>;
    USER_MEDIA: (response: IUserMediaResponse) => CursoredData<Tweet>;
    USER_NOTIFICATIONS: (response: IUserNotificationsResponse) => CursoredData<Notification>;
    USER_SUBSCRIPTIONS: (response: IUserSubscriptionsResponse) => CursoredData<User>;
    USER_TIMELINE: (response: IUserTweetsResponse) => CursoredData<Tweet>;
    USER_TIMELINE_AND_REPLIES: (response: IUserTweetsAndRepliesResponse) => CursoredData<Tweet>;
    USER_UNFOLLOW: (response: IUserUnfollowResponse) => boolean;
};
