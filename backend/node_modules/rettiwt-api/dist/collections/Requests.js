"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.requests = void 0;
var rettiwt_core_1 = require("rettiwt-core");
/**
 * The request generator from rettiwt-core.
 *
 * @internal
 */
var request = new rettiwt_core_1.Request();
/**
 * The collection of requests to various resources.
 *
 * @internal
 */
exports.requests = {
    /* eslint-disable @typescript-eslint/naming-convention */
    LIST_TWEETS: function (args) { return request.list.tweets(args.id, args.count, args.cursor); },
    MEDIA_UPLOAD_APPEND: function (args) { return request.media.appendUpload(args.upload.id, args.upload.media); },
    MEDIA_UPLOAD_FINALIZE: function (args) { return request.media.finalizeUpload(args.upload.id); },
    MEDIA_UPLOAD_INITIALIZE: function (args) { return request.media.initializeUpload(args.upload.size); },
    TWEET_DETAILS: function (args) { return request.tweet.details(args.id); },
    TWEET_DETAILS_ALT: function (args) { return request.tweet.replies(args.id); },
    TWEET_LIKE: function (args) { return request.tweet.like(args.id); },
    TWEET_POST: function (args) { return request.tweet.post(args.tweet); },
    TWEET_RETWEET: function (args) { return request.tweet.retweet(args.id); },
    TWEET_RETWEETERS: function (args) { return request.tweet.retweeters(args.id, args.count, args.cursor); },
    TWEET_SCHEDULE: function (args) { return request.tweet.schedule(args.tweet, args.tweet.scheduleFor); },
    TWEET_SEARCH: function (args) { return request.tweet.search(args.filter, args.count, args.cursor); },
    TWEET_UNLIKE: function (args) { return request.tweet.unlike(args.id); },
    TWEET_UNPOST: function (args) { return request.tweet.unpost(args.id); },
    TWEET_UNRETWEET: function (args) { return request.tweet.unretweet(args.id); },
    TWEET_UNSCHEDULE: function (args) { return request.tweet.unschedule(args.id); },
    USER_DETAILS_BY_USERNAME: function (args) { return request.user.detailsByUsername(args.id); },
    USER_DETAILS_BY_ID: function (args) { return request.user.detailsById(args.id); },
    USER_FEED_FOLLOWED: function (args) { return request.user.followed(args.count, args.cursor); },
    USER_FEED_RECOMMENDED: function (args) { return request.user.recommended(args.count, args.cursor); },
    USER_FOLLOW: function (args) { return request.user.follow(args.id); },
    USER_FOLLOWING: function (args) { return request.user.following(args.id, args.count, args.cursor); },
    USER_FOLLOWERS: function (args) { return request.user.followers(args.id, args.count, args.cursor); },
    USER_HIGHLIGHTS: function (args) { return request.user.highlights(args.id, args.count, args.cursor); },
    USER_LIKES: function (args) { return request.user.likes(args.id, args.count, args.cursor); },
    USER_MEDIA: function (args) { return request.user.media(args.id, args.count, args.cursor); },
    USER_NOTIFICATIONS: function (args) { return request.user.notifications(args.count, args.cursor); },
    USER_SUBSCRIPTIONS: function (args) { return request.user.subscriptions(args.id, args.count, args.cursor); },
    USER_TIMELINE: function (args) { return request.user.tweets(args.id, args.count, args.cursor); },
    USER_TIMELINE_AND_REPLIES: function (args) { return request.user.tweetsAndReplies(args.id, args.count, args.cursor); },
    USER_UNFOLLOW: function (args) { return request.user.unfollow(args.id); },
    /* eslint-enable @typescript-eslint/naming-convention */
};
//# sourceMappingURL=Requests.js.map