"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ErrorService = void 0;
var axios_1 = require("axios");
var Api_1 = require("../../enums/Api");
var Http_1 = require("../../enums/Http");
var JsonUtils_1 = require("../../helper/JsonUtils");
var ApiError_1 = require("../../models/errors/ApiError");
var HttpError_1 = require("../../models/errors/HttpError");
var TimeoutError_1 = require("../../models/errors/TimeoutError");
/**
 * The base service that handles any errors.
 *
 * @public
 */
var ErrorService = exports.ErrorService = /** @class */ (function () {
    function ErrorService() {
    }
    /**
     * Creates an API error instance based on the provided error code.
     *
     * @param errorCode - The error code.
     *
     * @returns An API error instance.
     */
    ErrorService.prototype.createApiError = function (errorCode) {
        return new ApiError_1.ApiError(errorCode, this.getApiErrorMessage(errorCode));
    };
    /**
     * Creates an HTTP error instance based on the provided HTTP status.
     *
     * @param httpStatus - The HTTP status code.
     *
     * @returns An HTTP error instance.
     */
    ErrorService.prototype.createHttpError = function (httpStatus) {
        return new HttpError_1.HttpError(httpStatus, this.getHttpErrorMessage(httpStatus));
    };
    /**
     * Retrieves the API error message based on the provided error code.
     *
     * @param errorCode - The error code.
     *
     * @returns The API error message.
     */
    ErrorService.prototype.getApiErrorMessage = function (errorCode) {
        var errorCodeKey = (0, JsonUtils_1.findKeyByValue)(Api_1.EErrorCodes, errorCode.toString());
        return !!errorCodeKey && errorCodeKey in Api_1.EApiErrors
            ? Api_1.EApiErrors[errorCodeKey]
            : ErrorService.DEFAULT_ERROR_MESSAGE;
    };
    /**
     * Retrieves the response data from the given error.
     *
     * @param error - The error object.
     *
     * @returns The response data.
     *
     * @throws The original error if it is not an HTTP error with a response.
     */
    ErrorService.prototype.getAxiosResponse = function (error) {
        if (error.response) {
            return error.response;
        }
        throw error;
    };
    /**
     * Retrieves the API error code from the Axios response data.
     *
     * @param response - The response object received.
     *
     * @returns The error code, or undefined if not found.
     */
    ErrorService.prototype.getErrorCode = function (response) {
        var errors = response.data.errors;
        return !!errors && errors.length ? errors[0].code : undefined;
    };
    /**
     * Retrieves the HTTP error message based on the provided HTTP status.
     *
     * @param httpStatus - The HTTP status code.
     *
     * @returns The HTTP error message.
     */
    ErrorService.prototype.getHttpErrorMessage = function (httpStatus) {
        return Object.values(Http_1.EHttpStatus).includes(httpStatus)
            ? Http_1.EHttpStatus[httpStatus]
            : ErrorService.DEFAULT_ERROR_MESSAGE;
    };
    /**
     * Handles API error in a response.
     *
     * @param response - The response object received.
     *
     * @throws An error with the corresponding API error message if any API-related error has occurred.
     */
    ErrorService.prototype.handleApiError = function (response) {
        var errorCode = this.getErrorCode(response);
        if (errorCode === undefined) {
            return;
        }
        throw this.createApiError(errorCode);
    };
    /**
     * Handles HTTP error in a response.
     *
     * @param response - The response object received.
     *
     * @throws An error with the corresponding HTTP status text if any HTTP-related error has occurred.
     */
    ErrorService.prototype.handleHttpError = function (response) {
        throw this.createHttpError(response.status);
    };
    /**
     * Handles exceeded timeout, configured in RettiwtConfig.
     *
     * @param error - The error object.
     *
     * @throws An error if the configured request timeout has been exceeded.
     */
    ErrorService.prototype.handleTimeoutError = function (error) {
        if (error.code === 'ECONNABORTED') {
            throw new TimeoutError_1.TimeoutError(error.message);
        }
    };
    /**
     * The method called when an error response is received from Twitter API.
     *
     * @param error - The error caught while making HTTP request to Twitter API.
     */
    ErrorService.prototype.handle = function (error) {
        if (!(0, axios_1.isAxiosError)(error)) {
            throw error;
        }
        this.handleTimeoutError(error);
        var axiosResponse = this.getAxiosResponse(error);
        this.handleApiError(axiosResponse);
        this.handleHttpError(axiosResponse);
    };
    /**
     * Error message used when the specific error type is not defined in the required enums.
     */
    ErrorService.DEFAULT_ERROR_MESSAGE = 'Unknown error';
    return ErrorService;
}());
//# sourceMappingURL=ErrorService.js.map