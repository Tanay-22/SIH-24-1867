"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var commander_1 = require("commander");
var CliUtils_1 = require("../helper/CliUtils");
/**
 * Creates a new 'user' command which uses the given Rettiwt instance.
 *
 * @param rettiwt - The Rettiwt instance to use.
 * @returns The created 'user' command.
 */
function createUserCommand(rettiwt) {
    var _this = this;
    // Creating the 'user' command
    var user = (0, commander_1.createCommand)('user').description('Access resources releated to users');
    // Details
    user.command('details')
        .description('Fetch the details of the user with the given id/username')
        .argument('<id>', 'The username/id of the user whose details are to be fetched')
        .action(function (id) { return __awaiter(_this, void 0, void 0, function () {
        var details, error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, rettiwt.user.details(id)];
                case 1:
                    details = _a.sent();
                    (0, CliUtils_1.output)(details);
                    return [3 /*break*/, 3];
                case 2:
                    error_1 = _a.sent();
                    (0, CliUtils_1.output)(error_1);
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    }); });
    // Follow
    user.command('follow')
        .description('Follow a user')
        .argument('<id>', 'The user to follow')
        .action(function (id) { return __awaiter(_this, void 0, void 0, function () {
        var result, error_2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, rettiwt.user.follow(id)];
                case 1:
                    result = _a.sent();
                    (0, CliUtils_1.output)(result);
                    return [3 /*break*/, 3];
                case 2:
                    error_2 = _a.sent();
                    (0, CliUtils_1.output)(error_2);
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    }); });
    // Followed
    user.command('followed')
        .description('Fetch your followed feed')
        .argument('[cursor]', 'The cursor to the batch of feed items to fetch')
        .action(function (cursor) { return __awaiter(_this, void 0, void 0, function () {
        var tweets, error_3;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, rettiwt.user.followed(cursor)];
                case 1:
                    tweets = _a.sent();
                    (0, CliUtils_1.output)(tweets);
                    return [3 /*break*/, 3];
                case 2:
                    error_3 = _a.sent();
                    (0, CliUtils_1.output)(error_3);
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    }); });
    // Followers
    user.command('followers')
        .description('Fetch the list of users who follow the given user')
        .argument('<id>', 'The id of the user')
        .argument('[count]', 'The number of followers to fetch')
        .argument('[cursor]', 'The cursor to the batch of followers to fetch')
        .action(function (id, count, cursor) { return __awaiter(_this, void 0, void 0, function () {
        var users, error_4;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, rettiwt.user.followers(id, count ? parseInt(count) : undefined, cursor)];
                case 1:
                    users = _a.sent();
                    (0, CliUtils_1.output)(users);
                    return [3 /*break*/, 3];
                case 2:
                    error_4 = _a.sent();
                    (0, CliUtils_1.output)(error_4);
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    }); });
    // Following
    user.command('following')
        .description('Fetch the list of users who are followed by the given user')
        .argument('<id>', 'The id of the user')
        .argument('[count]', 'The number of following to fetch')
        .argument('[cursor]', 'The cursor to the batch of following to fetch')
        .action(function (id, count, cursor) { return __awaiter(_this, void 0, void 0, function () {
        var users, error_5;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, rettiwt.user.following(id, count ? parseInt(count) : undefined, cursor)];
                case 1:
                    users = _a.sent();
                    (0, CliUtils_1.output)(users);
                    return [3 /*break*/, 3];
                case 2:
                    error_5 = _a.sent();
                    (0, CliUtils_1.output)(error_5);
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    }); });
    // Highlights
    user.command('highlights')
        .description('Fetch the list of highlighted tweets of the given user')
        .argument('<id>', 'The id of the user')
        .argument('[count]', 'The number of highlighted tweets to fetch')
        .argument('[cursor]', 'The cursor to the batch of highlights to fetch')
        .action(function (id, count, cursor) { return __awaiter(_this, void 0, void 0, function () {
        var tweets, error_6;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, rettiwt.user.highlights(id, count ? parseInt(count) : undefined, cursor)];
                case 1:
                    tweets = _a.sent();
                    (0, CliUtils_1.output)(tweets);
                    return [3 /*break*/, 3];
                case 2:
                    error_6 = _a.sent();
                    (0, CliUtils_1.output)(error_6);
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    }); });
    // Likes
    user.command('likes')
        .description('Fetch your list of liked tweet')
        .argument('[count]', 'The number of liked tweets to fetch')
        .argument('[cursor]', 'The cursor to the batch of liked tweets to fetch')
        .action(function (count, cursor) { return __awaiter(_this, void 0, void 0, function () {
        var tweets, error_7;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, rettiwt.user.likes(count ? parseInt(count) : undefined, cursor)];
                case 1:
                    tweets = _a.sent();
                    (0, CliUtils_1.output)(tweets);
                    return [3 /*break*/, 3];
                case 2:
                    error_7 = _a.sent();
                    (0, CliUtils_1.output)(error_7);
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    }); });
    // Media
    user.command('media')
        .description('Fetch the media timeline the given user')
        .argument('<id>', 'The id of the user')
        .argument('[count]', 'The number of media to fetch')
        .argument('[cursor]', 'The cursor to the batch of media to fetch')
        .action(function (id, count, cursor) { return __awaiter(_this, void 0, void 0, function () {
        var media, error_8;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, rettiwt.user.media(id, count ? parseInt(count) : undefined, cursor)];
                case 1:
                    media = _a.sent();
                    (0, CliUtils_1.output)(media);
                    return [3 /*break*/, 3];
                case 2:
                    error_8 = _a.sent();
                    (0, CliUtils_1.output)(error_8);
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    }); });
    // Recommended
    user.command('recommended')
        .description('Fetch your recommended feed')
        .argument('[cursor]', 'The cursor to the batch of feed items to fetch')
        .action(function (cursor) { return __awaiter(_this, void 0, void 0, function () {
        var tweets, error_9;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, rettiwt.user.recommended(cursor)];
                case 1:
                    tweets = _a.sent();
                    (0, CliUtils_1.output)(tweets);
                    return [3 /*break*/, 3];
                case 2:
                    error_9 = _a.sent();
                    (0, CliUtils_1.output)(error_9);
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    }); });
    // Replies
    user.command('replies')
        .description('Fetch the replies timeline the given user')
        .argument('<id>', 'The id of the user')
        .argument('[count]', 'The number of replies to fetch')
        .argument('[cursor]', 'The cursor to the batch of replies to fetch')
        .action(function (id, count, cursor) { return __awaiter(_this, void 0, void 0, function () {
        var replies, error_10;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, rettiwt.user.replies(id, count ? parseInt(count) : undefined, cursor)];
                case 1:
                    replies = _a.sent();
                    (0, CliUtils_1.output)(replies);
                    return [3 /*break*/, 3];
                case 2:
                    error_10 = _a.sent();
                    (0, CliUtils_1.output)(error_10);
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    }); });
    // Subscriptions
    user.command('subscriptions')
        .description('Fetch the list of users who are subscribed by the given user')
        .argument('<id>', 'The id of the user')
        .argument('[count]', 'The number of subscriptions to fetch')
        .argument('[cursor]', 'The cursor to the batch of subscriptions to fetch')
        .action(function (id, count, cursor) { return __awaiter(_this, void 0, void 0, function () {
        var users, error_11;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, rettiwt.user.subscriptions(id, count ? parseInt(count) : undefined, cursor)];
                case 1:
                    users = _a.sent();
                    (0, CliUtils_1.output)(users);
                    return [3 /*break*/, 3];
                case 2:
                    error_11 = _a.sent();
                    (0, CliUtils_1.output)(error_11);
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    }); });
    // Timeline
    user.command('timeline')
        .description('Fetch the tweets timeline the given user')
        .argument('<id>', 'The id of the user')
        .argument('[count]', 'The number of tweets to fetch')
        .argument('[cursor]', 'The cursor to the batch of tweets to fetch')
        .action(function (id, count, cursor) { return __awaiter(_this, void 0, void 0, function () {
        var tweets, error_12;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, rettiwt.user.timeline(id, count ? parseInt(count) : undefined, cursor)];
                case 1:
                    tweets = _a.sent();
                    (0, CliUtils_1.output)(tweets);
                    return [3 /*break*/, 3];
                case 2:
                    error_12 = _a.sent();
                    (0, CliUtils_1.output)(error_12);
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    }); });
    // Unfollow
    user.command('unfollow')
        .description('Unfollow a user')
        .argument('<id>', 'The user to unfollow')
        .action(function (id) { return __awaiter(_this, void 0, void 0, function () {
        var result, error_13;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, rettiwt.user.unfollow(id)];
                case 1:
                    result = _a.sent();
                    (0, CliUtils_1.output)(result);
                    return [3 /*break*/, 3];
                case 2:
                    error_13 = _a.sent();
                    (0, CliUtils_1.output)(error_13);
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    }); });
    return user;
}
exports.default = createUserCommand;
//# sourceMappingURL=User.js.map