"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var commander_1 = require("commander");
var rettiwt_core_1 = require("rettiwt-core");
var CliUtils_1 = require("../helper/CliUtils");
/**
 * Creates a new 'tweet' command which uses the given Rettiwt instance.
 *
 * @param rettiwt - The Rettiwt instance to use.
 * @returns The created 'tweet' command.
 */
function createTweetCommand(rettiwt) {
    var _this = this;
    // Creating the 'tweet' command
    var tweet = (0, commander_1.createCommand)('tweet').description('Access resources releated to tweets');
    // Details
    tweet
        .command('details')
        .description('Fetch the details of tweet with the given id')
        .argument('<id>', 'The id of the tweet whose details are to be fetched')
        .action(function (id) { return __awaiter(_this, void 0, void 0, function () {
        var details, error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, rettiwt.tweet.details(id)];
                case 1:
                    details = _a.sent();
                    (0, CliUtils_1.output)(details);
                    return [3 /*break*/, 3];
                case 2:
                    error_1 = _a.sent();
                    (0, CliUtils_1.output)(error_1);
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    }); });
    // Like
    tweet
        .command('like')
        .description('Like a tweet')
        .argument('<id>', 'The tweet to like')
        .action(function (id) { return __awaiter(_this, void 0, void 0, function () {
        var result, error_2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, rettiwt.tweet.like(id)];
                case 1:
                    result = _a.sent();
                    (0, CliUtils_1.output)(result);
                    return [3 /*break*/, 3];
                case 2:
                    error_2 = _a.sent();
                    (0, CliUtils_1.output)(error_2);
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    }); });
    // List
    tweet
        .command('list')
        .description('Fetch the list of tweets in the tweet list with the given id')
        .argument('<id>', 'The id of the tweet list')
        .argument('[count]', 'The number of tweets to fetch')
        .argument('[cursor]', 'The cursor to the batch of tweets to fetch')
        .action(function (id, count, cursor) { return __awaiter(_this, void 0, void 0, function () {
        var tweets, error_3;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, rettiwt.tweet.list(id, count ? parseInt(count) : undefined, cursor)];
                case 1:
                    tweets = _a.sent();
                    (0, CliUtils_1.output)(tweets);
                    return [3 /*break*/, 3];
                case 2:
                    error_3 = _a.sent();
                    (0, CliUtils_1.output)(error_3);
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    }); });
    // Post
    tweet
        .command('post')
        .description('Post a tweet (text only)')
        .argument('<text>', 'The text to post as a tweet')
        .option('-m, --media [string]', 'Comma-separated list of ids of the media item(s) to be posted')
        .option('-q, --quote [string]', 'The id of the tweet to quote in the tweet to be posted')
        .option('-r, --reply [string]', 'The id of the tweet to which the reply is to be made, if the tweet is to be a reply')
        .action(function (text, options) { return __awaiter(_this, void 0, void 0, function () {
        var result, error_4;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, rettiwt.tweet.post({
                            text: text,
                            media: (options === null || options === void 0 ? void 0 : options.media) ? options === null || options === void 0 ? void 0 : options.media.split(',').map(function (item) { return ({ id: item }); }) : undefined,
                            quote: options === null || options === void 0 ? void 0 : options.quote,
                            replyTo: options === null || options === void 0 ? void 0 : options.reply,
                        })];
                case 1:
                    result = _a.sent();
                    (0, CliUtils_1.output)(result);
                    return [3 /*break*/, 3];
                case 2:
                    error_4 = _a.sent();
                    (0, CliUtils_1.output)(error_4);
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    }); });
    // Retweet
    tweet
        .command('retweet')
        .description('Retweet a tweet')
        .argument('<id>', 'The tweet to retweet')
        .action(function (id) { return __awaiter(_this, void 0, void 0, function () {
        var result, error_5;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, rettiwt.tweet.retweet(id)];
                case 1:
                    result = _a.sent();
                    (0, CliUtils_1.output)(result);
                    return [3 /*break*/, 3];
                case 2:
                    error_5 = _a.sent();
                    (0, CliUtils_1.output)(error_5);
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    }); });
    // Retweeters
    tweet
        .command('retweeters')
        .description('Fetch the list of users who retweeted the given tweets')
        .argument('<id>', 'The id of the tweet')
        .argument('[count]', 'The number of retweeters to fetch')
        .argument('[cursor]', 'The cursor to the batch of retweeters to fetch')
        .action(function (id, count, cursor) { return __awaiter(_this, void 0, void 0, function () {
        var tweets, error_6;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, rettiwt.tweet.retweeters(id, count ? parseInt(count) : undefined, cursor)];
                case 1:
                    tweets = _a.sent();
                    (0, CliUtils_1.output)(tweets);
                    return [3 /*break*/, 3];
                case 2:
                    error_6 = _a.sent();
                    (0, CliUtils_1.output)(error_6);
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    }); });
    // Schedule
    tweet
        .command('schedule')
        .description('Schedule a tweet to be posted at a given date/time')
        .argument('<text>', 'The text to post as a tweet')
        .argument('<time>', 'The date/time at which the tweet is to be scheduled (valid date/time string)')
        .option('-m, --media [string]', 'Comma-separated list of ids of the media item(s) to be posted')
        .option('-q, --quote [string]', 'The id of the tweet to quote in the tweet to be posted')
        .option('-r, --reply [string]', 'The id of the tweet to which the reply is to be made, if the tweet is to be a reply')
        .action(function (text, time, options) { return __awaiter(_this, void 0, void 0, function () {
        var result, error_7;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, rettiwt.tweet.schedule({
                            text: text,
                            media: (options === null || options === void 0 ? void 0 : options.media) ? options === null || options === void 0 ? void 0 : options.media.split(',').map(function (item) { return ({ id: item }); }) : undefined,
                            quote: options === null || options === void 0 ? void 0 : options.quote,
                            replyTo: options === null || options === void 0 ? void 0 : options.reply,
                            scheduleFor: new Date(time),
                        })];
                case 1:
                    result = _a.sent();
                    (0, CliUtils_1.output)(result);
                    return [3 /*break*/, 3];
                case 2:
                    error_7 = _a.sent();
                    (0, CliUtils_1.output)(error_7);
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    }); });
    // Search
    tweet
        .command('search')
        .description('Fetch the list of tweets that match the given filter options')
        .argument('[count]', 'The number of tweets to fetch')
        .argument('[cursor]', 'The cursor to the batch of tweets to fetch')
        .option('-f, --from <string>', 'Matches the tweets made by the comma-separated list of given users')
        .option('-t, --to <string>', 'Matches the tweets made to the comma-separated list of given users')
        .option('-w, --words <string>', 'Matches the tweets containing the given comma-separated list of words')
        .option('-p, --phrase <string>', 'Matches the tweets containing the exact phrase')
        .option('--optional-words <string>', 'Matches the tweets containing any of the given comma-separated list of words')
        .option('--exclude-words <string>', 'Matches the tweets that do not contain any of the give comma-separated list of words')
        .option('-h, --hashtags <string>', 'Matches the tweets containing the given comma-separated list of hashtags')
        .option('-m, --mentions <string>', 'Matches the tweets that mention the given comma-separated list of usernames')
        .option('-r, --min-replies <number>', 'Matches the tweets that have a minimum of given number of replies')
        .option('-l, --min-likes <number>', 'Matches the tweets that have a minimum of given number of likes')
        .option('-x, --min-retweets <number>', 'Matches the tweets that have a minimum of given number of retweets')
        .option('-q, --quoted <string>', 'Matches the tweets that quote the tweet with the given id')
        .option('--exclude-links', 'Matches tweets that do not contain links')
        .option('--exclude-replies', 'Matches the tweets that are not replies')
        .option('-s, --start <string>', 'Matches the tweets made since the given date (valid date/time string)')
        .option('-e, --end <string>', 'Matches the tweets made upto the given date (valid date/time string)')
        .option('--stream', 'Stream the filtered tweets in pseudo-realtime')
        .option('-i, --interval <number>', 'The polling interval (in ms) to use for streaming. Default is 60000')
        .action(function (count, cursor, options) { return __awaiter(_this, void 0, void 0, function () {
        var _a, _b, _c, tweet_1, e_1_1, tweets, error_8;
        var _d, e_1, _e, _f;
        return __generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    _g.trys.push([0, 16, , 17]);
                    if (!(options === null || options === void 0 ? void 0 : options.stream)) return [3 /*break*/, 13];
                    _g.label = 1;
                case 1:
                    _g.trys.push([1, 6, 7, 12]);
                    _a = true, _b = __asyncValues(rettiwt.tweet.stream(new TweetSearchOptions(options).toTweetFilter(), options === null || options === void 0 ? void 0 : options.interval));
                    _g.label = 2;
                case 2: return [4 /*yield*/, _b.next()];
                case 3:
                    if (!(_c = _g.sent(), _d = _c.done, !_d)) return [3 /*break*/, 5];
                    _f = _c.value;
                    _a = false;
                    tweet_1 = _f;
                    (0, CliUtils_1.output)(tweet_1);
                    _g.label = 4;
                case 4:
                    _a = true;
                    return [3 /*break*/, 2];
                case 5: return [3 /*break*/, 12];
                case 6:
                    e_1_1 = _g.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 12];
                case 7:
                    _g.trys.push([7, , 10, 11]);
                    if (!(!_a && !_d && (_e = _b.return))) return [3 /*break*/, 9];
                    return [4 /*yield*/, _e.call(_b)];
                case 8:
                    _g.sent();
                    _g.label = 9;
                case 9: return [3 /*break*/, 11];
                case 10:
                    if (e_1) throw e_1.error;
                    return [7 /*endfinally*/];
                case 11: return [7 /*endfinally*/];
                case 12: return [3 /*break*/, 15];
                case 13: return [4 /*yield*/, rettiwt.tweet.search(new TweetSearchOptions(options).toTweetFilter(), count ? parseInt(count) : undefined, cursor)];
                case 14:
                    tweets = _g.sent();
                    (0, CliUtils_1.output)(tweets);
                    _g.label = 15;
                case 15: return [3 /*break*/, 17];
                case 16:
                    error_8 = _g.sent();
                    (0, CliUtils_1.output)(error_8);
                    return [3 /*break*/, 17];
                case 17: return [2 /*return*/];
            }
        });
    }); });
    // Unlike
    tweet
        .command('unlike')
        .description('Unlike a tweet')
        .argument('<id>', 'The id of the tweet')
        .action(function (id) { return __awaiter(_this, void 0, void 0, function () {
        var result, error_9;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, rettiwt.tweet.unlike(id)];
                case 1:
                    result = _a.sent();
                    (0, CliUtils_1.output)(result);
                    return [3 /*break*/, 3];
                case 2:
                    error_9 = _a.sent();
                    (0, CliUtils_1.output)(error_9);
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    }); });
    // Unpost
    tweet
        .command('unpost')
        .description('Unpost a tweet')
        .argument('<id>', 'The id of the tweet')
        .action(function (id) { return __awaiter(_this, void 0, void 0, function () {
        var result, error_10;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, rettiwt.tweet.unpost(id)];
                case 1:
                    result = _a.sent();
                    (0, CliUtils_1.output)(result);
                    return [3 /*break*/, 3];
                case 2:
                    error_10 = _a.sent();
                    (0, CliUtils_1.output)(error_10);
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    }); });
    // Unretweet
    tweet
        .command('unretweet')
        .description('Unretweet a tweet')
        .argument('<id>', 'The id of the tweet')
        .action(function (id) { return __awaiter(_this, void 0, void 0, function () {
        var result, error_11;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, rettiwt.tweet.unretweet(id)];
                case 1:
                    result = _a.sent();
                    (0, CliUtils_1.output)(result);
                    return [3 /*break*/, 3];
                case 2:
                    error_11 = _a.sent();
                    (0, CliUtils_1.output)(error_11);
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    }); });
    // Unschedule
    tweet
        .command('unschedule')
        .description('Unschedule a tweet')
        .argument('<id>', 'The id of the tweet')
        .action(function (id) { return __awaiter(_this, void 0, void 0, function () {
        var result, error_12;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, rettiwt.tweet.unschedule(id)];
                case 1:
                    result = _a.sent();
                    (0, CliUtils_1.output)(result);
                    return [3 /*break*/, 3];
                case 2:
                    error_12 = _a.sent();
                    (0, CliUtils_1.output)(error_12);
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    }); });
    // Upload
    tweet
        .command('upload')
        .description('Upload a media file and returns the alloted id (valid for 24 hrs)')
        .argument('<path>', 'The path to the media to upload')
        .action(function (path) { return __awaiter(_this, void 0, void 0, function () {
        var id, error_13;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, rettiwt.tweet.upload(path)];
                case 1:
                    id = _a.sent();
                    (0, CliUtils_1.output)(id);
                    return [3 /*break*/, 3];
                case 2:
                    error_13 = _a.sent();
                    (0, CliUtils_1.output)(error_13);
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    }); });
    return tweet;
}
/**
 * The search options supplied while searching for tweets.
 *
 * @remarks The search options are implementations of the ones offered by {@link TweetFilter}
 */
var TweetSearchOptions = /** @class */ (function () {
    /**
     * Initializes a new object from the given options.
     *
     * @param options - The search options.
     */
    function TweetSearchOptions(options) {
        this.excludeLinks = false;
        this.excludeReplies = false;
        this.from = options === null || options === void 0 ? void 0 : options.from;
        this.to = options === null || options === void 0 ? void 0 : options.to;
        this.words = options === null || options === void 0 ? void 0 : options.words;
        this.phrase = options === null || options === void 0 ? void 0 : options.phrase;
        this.optionalWords = options === null || options === void 0 ? void 0 : options.optionalWords;
        this.excludeWords = options === null || options === void 0 ? void 0 : options.excludeWords;
        this.hashtags = options === null || options === void 0 ? void 0 : options.hashtags;
        this.mentions = options === null || options === void 0 ? void 0 : options.mentions;
        this.minReplies = options === null || options === void 0 ? void 0 : options.minReplies;
        this.minLikes = options === null || options === void 0 ? void 0 : options.minLikes;
        this.minRetweets = options === null || options === void 0 ? void 0 : options.minRetweets;
        this.quoted = options === null || options === void 0 ? void 0 : options.quoted;
        this.excludeLinks = options === null || options === void 0 ? void 0 : options.excludeLinks;
        this.excludeReplies = options === null || options === void 0 ? void 0 : options.excludeReplies;
        this.start = options === null || options === void 0 ? void 0 : options.start;
        this.end = options === null || options === void 0 ? void 0 : options.end;
        this.stream = options === null || options === void 0 ? void 0 : options.stream;
        this.interval = options === null || options === void 0 ? void 0 : options.interval;
    }
    /**
     * Converts the filter options to a format recognizable by rettiwt-api.
     *
     * @returns The '{@link TweetFilter}' representation of filter options.
     */
    TweetSearchOptions.prototype.toTweetFilter = function () {
        return new rettiwt_core_1.TweetFilter({
            fromUsers: this.from ? this.from.split(',') : undefined,
            toUsers: this.to ? this.to.split(',') : undefined,
            includeWords: this.words ? this.words.split(',') : undefined,
            includePhrase: this.phrase,
            optionalWords: this.optionalWords ? this.optionalWords.split(',') : undefined,
            excludeWords: this.excludeWords ? this.excludeWords.split(',') : undefined,
            hashtags: this.hashtags ? this.hashtags.split(',') : undefined,
            mentions: this.mentions ? this.mentions.split(',') : undefined,
            minReplies: this.minReplies,
            minLikes: this.minLikes,
            minRetweets: this.minRetweets,
            quoted: this.quoted,
            links: !this.excludeLinks,
            replies: !this.excludeReplies,
            startDate: this.start ? new Date(this.start) : undefined,
            endDate: this.end ? new Date(this.end) : undefined,
        });
    };
    return TweetSearchOptions;
}());
exports.default = createTweetCommand;
//# sourceMappingURL=Tweet.js.map