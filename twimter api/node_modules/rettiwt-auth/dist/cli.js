#! /usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// PACKAGES
var commander_1 = require("commander");
var _1 = require("./");
// Creating a new commandline program
var program = new commander_1.Command();
// Setting program details
program.name('rettiwt-auth').description('A CLI tool for authenticating against Twitter API');
// Guest
program
    .command('guest')
    .description('Generated authentcation credentials for a guest user')
    .option('-h, --header', 'Generate the credentials as HTTP headers')
    .option('-p, --proxy <URL>', 'The URL to the proxy server to use')
    .action(function (options) {
    // Generating and returning the credentials
    new _1.Auth({ proxyUrl: options.proxy ? new URL(options.proxy) : undefined })
        .getGuestCredential()
        .then(function (res) {
        var creds;
        // If credentials required as headers
        if (options.header) {
            creds = JSON.stringify(res.toHeader().toJSON(), null, 4);
        }
        // If credentials required as token
        else {
            creds = res.guestToken;
        }
        console.log(creds);
    })
        .catch(function (err) { return console.log(err); });
});
// User
program
    .command('user')
    .description('Generate authentication credentials for a Twitter user')
    .argument('<email>', 'The email id of the Twitter account')
    .argument('<username>', 'The username associated with the Twitter account')
    .argument('<password>', 'The password to the Twitter account')
    .option('-h, --header', 'Generate the credentials as HTTP headers')
    .option('-p, --proxy <URL>', 'The URL to the proxy server to use')
    .action(function (email, username, password, options) {
    // Logging in and returning the credentials
    new _1.Auth({ proxyUrl: options.proxy ? new URL(options.proxy) : undefined })
        .getUserCredential({
        email: email,
        userName: username,
        password: password,
    })
        .then(function (res) {
        var creds;
        // If credentials required as headers
        if (options.header) {
            creds = JSON.stringify(res.toHeader().toJSON(), null, 4);
        }
        // If credentials required as api key
        else {
            creds = Buffer.from(res.toHeader().cookie).toString('base64');
        }
        console.log(creds);
    })
        .catch(function (err) { return console.log(err); });
});
// Finalizing the CLI
program.parse();
//# sourceMappingURL=cli.js.map